;; penalties.el --- Penalty system for habit quest -*- lexical-binding: t; -*-

(require 'quest-system-core)

;; –ë–∞–∑–æ–≤—ã–µ —à—Ç—Ä–∞—Ñ—ã
(defvar hq-penalty-values
  '(;; –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–∏–≤—ã—á–∫–∏
    (:id "habit-break" :name "–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∏–∫–∞" 
     :xp-penalty 15 :gold-penalty 10
     :description "–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∏–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏")
    
    (:id "daily-skip" :name "–ü—Ä–æ–ø—É—Å–∫ –¥–Ω—è" 
     :xp-penalty 30 :gold-penalty 20
     :description "–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∑–∞ –¥–µ–Ω—å")
    
    ;; –®—Ç—Ä–∞—Ñ—ã –∑–∞ –∑–∞–¥–∞—á–∏
    (:id "deadline-miss" :name "–ü—Ä–æ—Å—Ä–æ—á–∫–∞ –¥–µ–¥–ª–∞–π–Ω–∞"
     :xp-penalty 20 :gold-penalty 15
     :description "–®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏")
    
    (:id "long-deadline-miss" :name "–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—Ä–æ—á–∫–∞"
     :xp-penalty 40 :gold-penalty 30
     :description "–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É –±–æ–ª–µ–µ 3 –¥–Ω–µ–π")
    
    ;; –®—Ç—Ä–∞—Ñ—ã –∑–∞ –∫–≤–µ—Å—Ç—ã
    (:id "quest-abandon" :name "–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∫–≤–µ—Å—Ç–∞"
     :xp-penalty 50 :gold-penalty 40
     :description "–®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞")
    
    (:id "quest-stall" :name "–ó–∞—Å—Ç–æ–π –∫–≤–µ—Å—Ç–∞"
     :xp-penalty 25 :gold-penalty 20
     :description "–®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∫–≤–µ—Å—Ç–µ –±–æ–ª–µ–µ 5 –¥–Ω–µ–π"))
  "–°–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤ —Å–∏—Å—Ç–µ–º—ã.")

;; –ò—Å—Ç–æ—Ä–∏—è —à—Ç—Ä–∞—Ñ–æ–≤
(defvar hq-penalty-history nil
  "–ò—Å—Ç–æ—Ä–∏—è –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤.")

;; –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à—Ç—Ä–∞—Ñ–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á–∏
(add-hook 'org-after-todo-state-change-hook
          (lambda ()
            (let ((is-habit (member "habit" (org-get-tags))))
              (when is-habit
                ;; –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ç—Ä–∞—Ñ—ã –¥–ª—è –ø—Ä–∏–≤—ã—á–µ–∫
                (hq-check-habit-penalties)))
            ;; –ü—Ä–æ–≤–µ—Ä—è–µ–º —à—Ç—Ä–∞—Ñ—ã –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤
            (hq-check-deadline-penalties)))

;; –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à—Ç—Ä–∞—Ñ–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ cron –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)
(defun hq-daily-penalty-check ()
  "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤."
  (hq-check-quest-penalties))

(defun hq-apply-penalty (penalty-id &optional multiplier)
  "–ü—Ä–∏–º–µ–Ω–∏—Ç—å —à—Ç—Ä–∞—Ñ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
PENALTY-ID - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —à—Ç—Ä–∞—Ñ–∞
MULTIPLIER - –º–Ω–æ–∂–∏—Ç–µ–ª—å —à—Ç—Ä–∞—Ñ–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0)"
  (let* ((penalty (seq-find (lambda (p) 
                             (string= (plist-get p :id) penalty-id))
                           hq-penalty-values))
         (mult (or multiplier 1.0))
         (xp-penalty (round (* (plist-get penalty :xp-penalty) mult)))
         (gold-penalty (round (* (plist-get penalty :gold-penalty) mult))))
    
    ;; –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ
    (setq hq-xp (max 0 (- hq-xp xp-penalty)))
    (setq hq-gold (max 0 (- hq-gold gold-penalty)))
    
    ;; –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    (push (list :id penalty-id
                :timestamp (current-time)
                :xp-penalty xp-penalty
                :gold-penalty gold-penalty)
          hq-penalty-history)
    
    ;; –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    (hq-save-data)
    
    ;; –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    (message "üò¢ –ü–æ–ª—É—á–µ–Ω —à—Ç—Ä–∞—Ñ: %s (-%d XP, -%d –∑–æ–ª–æ—Ç–∞)"
             (plist-get penalty :name)
             xp-penalty gold-penalty)))

;; –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞–ª–æ–∂–µ–Ω–∏—è —à—Ç—Ä–∞—Ñ–æ–≤

(defun hq-check-habit-penalties ()
  "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –Ω–∞–ª–æ–∂–∏—Ç—å —à—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏."
  (let ((missed-habits 0)
        (total-habits 0))
    
    ;; –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø—Ä–∏–≤—ã—á–∫—É –≤ agenda
    (with-current-buffer "*Org Agenda*"
      (save-excursion
        (goto-char (point-min))
        (while (not (eobp))
          (when (get-text-property (point) 'org-habit-p)
            (setq total-habits (1+ total-habits))
            (save-excursion
              (when (re-search-forward "\\([xX]\\|-\\)" (line-end-position) t)
                (setq missed-habits (1+ missed-habits)))))
          (forward-line 1))))
    
    ;; –ï—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏
    (when (and (> total-habits 0)
               (= missed-habits total-habits))
      (hq-apply-penalty "daily-skip"))))

(defun hq-check-deadline-penalties ()
  "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –Ω–∞–ª–æ–∂–∏—Ç—å —à—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã."
  (let ((new-overdue-tasks 0))
    (org-map-entries
     (lambda ()
       (let* ((deadline (org-entry-get nil "DEADLINE"))
              (state (org-get-todo-state))
              (last-penalty-date (org-entry-get nil "LAST_PENALTY")))
         
         ;; –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
         ;; 1. –ï—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω
         ;; 2. –ó–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
         ;; 3. –®—Ç—Ä–∞—Ñ –µ—â—ë –Ω–µ –Ω–∞—á–∏—Å–ª—è–ª—Å—è
         (when (and deadline
                   (not (member state org-done-keywords))
                   (not last-penalty-date))
           
           (let* ((deadline-time (org-time-string-to-time deadline))
                  (days-overdue (/ (float-time
                                  (time-subtract (current-time) deadline-time))
                                 86400)))
             ;; –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
             (when (and (> days-overdue 0) (< days-overdue 7))
               (setq new-overdue-tasks (1+ new-overdue-tasks))
               ;; –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —à—Ç—Ä–∞—Ñ –Ω–∞—á–∏—Å–ª–µ–Ω
               (org-entry-put nil "LAST_PENALTY" 
                            (format-time-string "%Y-%m-%d")))))))
     nil 'agenda)
    
    ;; –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–¥–∏–Ω –æ–±—â–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ –≤—Å–µ –Ω–æ–≤—ã–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    (when (> new-overdue-tasks 0)
      (hq-apply-penalty "deadline-miss" new-overdue-tasks))))

(defun hq-check-quest-penalties ()
  "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –Ω–∞–ª–æ–∂–∏—Ç—å —à—Ç—Ä–∞—Ñ—ã –∑–∞ –∫–≤–µ—Å—Ç—ã."
  (dolist (quest hq-quests)
    (unless (plist-get quest :completed)
      (let ((last-progress (plist-get quest :last-progress-date)))
        (when last-progress
          (let ((days-without-progress
                 (/ (float-time
                     (time-subtract (current-time)
                                  (org-time-string-to-time last-progress)))
                    86400)))
            (when (> days-without-progress 5)
              (hq-apply-penalty "quest-stall"))))))))

;; –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —à—Ç—Ä–∞—Ñ–æ–≤
(defun hq-show-penalty-history ()
  "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —à—Ç—Ä–∞—Ñ–æ–≤."
  (interactive)
  (with-current-buffer (get-buffer-create "*Penalty History*")
    (let ((inhibit-read-only t))
      (erase-buffer)
      
      (insert (propertize "üìã –ò—Å—Ç–æ—Ä–∏—è —à—Ç—Ä–∞—Ñ–æ–≤\n"
                         'face '(:height 1.5 :weight bold)))
      (insert "============================\n\n")
      
      (if hq-penalty-history
          (dolist (penalty (reverse hq-penalty-history))
            (let* ((penalty-def (seq-find (lambda (p) 
                                          (string= (plist-get p :id)
                                                  (plist-get penalty :id)))
                                        hq-penalty-values))
                   (timestamp (format-time-string "%Y-%m-%d %H:%M"
                                                (plist-get penalty :timestamp))))
              (insert 
               (format "%s\n" timestamp)
               (propertize (format "%s\n" (plist-get penalty-def :name))
                          'face '(:weight bold))
               (format "  XP: -%d, –ó–æ–ª–æ—Ç–æ: -%d\n\n"
                       (plist-get penalty :xp-penalty)
                       (plist-get penalty :gold-penalty)))))
        (insert (propertize "–ò—Å—Ç–æ—Ä–∏—è —à—Ç—Ä–∞—Ñ–æ–≤ –ø—É—Å—Ç–∞\n"
                           'face '(:slant italic))))
      
      (special-mode)
      (local-set-key "q" 'quit-window))
    (switch-to-buffer (current-buffer))))

(provide 'penalties)
