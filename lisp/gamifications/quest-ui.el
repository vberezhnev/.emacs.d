;; quest-ui.el --- –£–ª—É—á—à–µ–Ω–Ω—ã–µ UI-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–≤–µ—Å—Ç–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)

(require 'quest-system-core)

;; ======================================================================
;; === –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ, –Ω–∞–¥–µ–∂–Ω–æ–≥–æ UI
;; ======================================================================

(defvar hq-category-colors
  '(;;("EGE" . "#FF6347")      ; –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π, –∫–∞–∫ —ç–Ω–µ—Ä–≥–∏—è –ì—ç–≤–∏–Ω–∞ –ë–µ–ª—Å–æ–Ω–∞
    ("CORE" . "#FFD700")     ; –ó–æ–ª–æ—Ç–æ–π, –∫–∞–∫ –∞–º–±–∏—Ü–∏–∏ –†–∏—á–∞—Ä–¥–∞ –•–µ–Ω–¥—Ä–∏–∫—Å–∞
    ("ASCENT" . "#4CAF50")   ; –ó–µ–ª—ë–Ω—ã–π, –∫–∞–∫ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –ü–∏—Ç–µ—Ä–∞ –ì—Ä–µ–≥–æ—Ä–∏
    ("PERSONAL" . "#6A5ACD")) ; –§–∏–æ–ª–µ—Ç–æ–≤—ã–π, –∫–∞–∫ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å –ì–∏–ª—Ñ–æ–π–ª–∞
  "–ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á.")

(defvar hq-task-rewards
  '(;;("EGE" . (:xp 50 :gold 20))      ; –í—ã—Å–æ–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ì—ç–≤–∏–Ω –ë–µ–ª—Å–æ–Ω)
    ("CORE" . (:xp 40 :gold 15))     ; –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–¥–∞—á (–†–∏—á–∞—Ä–¥ –•–µ–Ω–¥—Ä–∏–∫—Å)
    ("ASCENT" . (:xp 30 :gold 10))   ; –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ (–ü–∏—Ç–µ—Ä –ì—Ä–µ–≥–æ—Ä–∏)
    ("PERSONAL" . (:xp 20 :gold 5))) ; –ú–µ–Ω—å—à–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ì–∏–ª—Ñ–æ–π–ª)
  "–ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –Ω–∞–≥—Ä–∞–¥ (XP –∏ –∑–æ–ª–æ—Ç–æ) –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á.")

(defun hq-ui-width ()
  "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è UI."
  (min 70 (- (window-width) 4)))

(defun hq-make-divider (&optional char)
  "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å."
  (let ((divider-char (or char ?-)))
    (propertize (make-string (hq-ui-width) divider-char)
                'face '(:foreground "#4A90E2"))))

(defun hq-make-header (title)
  "–°–æ–∑–¥–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É."
  (let* ((width (hq-ui-width))
         (title-len (length title))
         (padding-left (/ (- width title-len) 2))
         (padding-right (- width title-len padding-left)))
    (concat 
     (propertize (make-string padding-left ?\s) 'face '(:foreground "#4A90E2"))
     (propertize title 'face '(:foreground "#FFD700" :weight bold))
     (propertize (make-string padding-right ?\s) 'face '(:foreground "#4A90E2")))))

(defun hq-make-content (content)
  "–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π."
  (let* ((width (hq-ui-width))
         (content-len (length content))
         (padding (max 0 (- width content-len))))
    (concat content (make-string padding ?\s))))

(defun hq-progress-bar (current max width)
  "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å ASCII-—Å–∏–º–≤–æ–ª–∞–º–∏."
  (let* ((current-val (or current 0))  ; –ï—Å–ª–∏ current nil, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
         (max-val (or max 1))          ; –ï—Å–ª–∏ max nil, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1
         (ratio (if (> max-val 0) (/ (float current-val) max-val) 0))
         (filled (round (* width ratio)))
         (empty (- width filled)))
    (concat "[" 
            (propertize (make-string filled ?#) 'face '(:foreground "#4CAF50"))
            (propertize (make-string empty ?.) 'face '(:foreground "#666666"))
            "]")))

;; ======================================================================
;; === –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
;; ======================================================================

(defun hq-show-potential-reward ()
  "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."
  (interactive)
  (let* ((category (or (org-entry-get nil "CATEGORY") "PERSONAL"))
         (base-rewards (cdr (assoc category hq-task-rewards)))
         (priority (org-entry-get nil "PRIORITY"))
         (priority-mult (or (cdr (assoc (and priority (aref priority 0))
                                       hq-priority-multipliers))
                           1.0))
         (clock-minutes (org-clock-sum-current-item))
         (time-bonus (hq-calculate-time-bonus clock-minutes))
         (deadline-bonus (hq-calculate-deadline-bonus))
         (potential-xp (round (* (plist-get base-rewards :xp)
                                 priority-mult
                                 time-bonus
                                 deadline-bonus)))
         (potential-gold (round (* (plist-get base-rewards :gold)
                                   priority-mult
                                   time-bonus
                                   deadline-bonus)))
         (category-color (cdr (assoc category hq-category-colors)))
         (xp-to-next-level (- 100 (mod hq-xp 100))))
    
    (goto-char (point-max))
    (insert "\n")
    
    ;; –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    (insert (hq-make-divider ?=) "\n")
    (insert (hq-make-header "‚ú® QUEST SYSTEM ‚ú®") "\n")
    (insert (hq-make-divider ?=) "\n")
    
    ;; –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    (insert (propertize " –ü–ï–†–°–û–ù–ê–ñ " 'face '(:foreground "#5C85D6" :weight bold)) "\n")
    (insert (format " –£—Ä–æ–≤–µ–Ω—å: %d   XP: %d/100   %s   –ó–æ–ª–æ—Ç–æ: %d ü™ô\n" 
                    hq-level (mod hq-xp 100) 
                    (hq-progress-bar (mod hq-xp 100) 100 20)
                    hq-gold))
    
    ;; –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞—á—É
    (insert (hq-make-divider) "\n")
    (insert (propertize " –ù–ê–ì–†–ê–î–ê –ó–ê –ó–ê–î–ê–ß–£ " 'face '(:foreground "#5C85D6" :weight bold)) "\n")
    (insert (format " –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n" 
                    (propertize category 'face `(:foreground ,category-color :weight bold))))
    (insert (format " –ù–∞–≥—Ä–∞–¥–∞: %s\n" 
                    (propertize (format "%d XP, %d –∑–æ–ª–æ—Ç–∞" potential-xp potential-gold) 
                                'face '(:foreground "#4CAF50" :weight bold))))
    
    ;; –ú–Ω–æ–∂–∏—Ç–µ–ª–∏
    (insert " –ú–Ω–æ–∂–∏—Ç–µ–ª–∏:\n")
    (insert (format "   ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: √ó%.1f\n" priority-mult))
    (insert (format "   ‚Ä¢ –ë–æ–Ω—É—Å –∑–∞ –≤—Ä–µ–º—è: √ó%.1f\n" time-bonus))
    (insert (format "   ‚Ä¢ –ë–æ–Ω—É—Å –∑–∞ –¥–µ–¥–ª–∞–π–Ω: √ó%.1f\n" deadline-bonus))
    
    (insert (hq-make-divider ?=) "\n")))

(defun gtd-add-progress-info-to-agenda (&optional arg)
  "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤ GTD view —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –∑–∞–¥–∞—á"
  (interactive)
  (let ((inhibit-read-only t))
    (message "–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á")
    
    (let* ((categories '("CORE" "ASCENT" "PERSONAL")) ;; "EGE" 
           (total-tasks 0)
           (completed-tasks 0)
           (category-stats (make-hash-table :test 'equal))
           (debug-buffer (get-buffer-create "*Task Debug*")))
      
      ;; –û—á–∏—â–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –±—É—Ñ–µ—Ä
      ;; (with-current-buffer debug-buffer
      ;;   (erase-buffer))
      
      ;; –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      (dolist (category categories)
        (puthash category (list 0 0) category-stats))
      
      ;; –Ø–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      (puthash "ASCENT" (list 3 0) category-stats)
      (puthash "CORE" (list 1 0) category-stats)
      (setq total-tasks 4)  ;; 3 ASCENT + 1 CORE
      
      ;; –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      (save-excursion
        (goto-char (point-min))
        (let ((section "unknown")
              (line-num 1))
          
          (while (not (eobp))
            (let ((line (buffer-substring-no-properties 
                          (line-beginning-position) 
                          (line-end-position))))
              
              ;; –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏—é
              (cond
               ((string-match "^\\s-*Today\\s*$" line)
                (setq section "Today"))
               ((string-match "^\\s-*Passed deadline\\s*$" line)
                (setq section "Passed deadline"))
               ((string-match "^\\s-*Completed today\\s*$" line)
                (setq section "Completed today")))
              
              ;; –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
              (with-current-buffer debug-buffer
                (insert (format "Line %d [%s]: %s\n" line-num section line))))
            
            (forward-line 1)
            (setq line-num (1+ line-num)))))
      
      ;; –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      ;; (display-buffer debug-buffer)
      (maphash (lambda (category stats)
                (message "–ö–∞—Ç–µ–≥–æ—Ä–∏—è %s: %d/%d –∑–∞–¥–∞—á" 
                        category (cadr stats) (car stats)))
              category-stats)
      
      ;; –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–µ–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      (goto-char (point-max))
      (insert "\n")
      (insert (hq-make-divider ?=) "\n")
      (insert (hq-make-header "üìä –ü–†–û–ì–†–ï–°–° –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ß") "\n")
      (insert (hq-make-divider ?=) "\n")
      
      ;; –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      (insert (propertize " –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–°–û–ù–ê–ñ–ê " 'face '(:foreground "#5C85D6" :weight bold)) "\n")
      (insert (format " –£—Ä–æ–≤–µ–Ω—å: %d   XP: %d/100   %s   –ó–æ–ª–æ—Ç–æ: %d ü™ô\n" 
                      hq-level (mod hq-xp 100) 
                      (hq-progress-bar (mod hq-xp 100) 100 20)
                      hq-gold))
      
      ;; –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      (insert (hq-make-divider) "\n")
      (insert (propertize " –ü–†–û–ì–†–ï–°–° –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú " 'face '(:foreground "#5C85D6" :weight bold)) "\n")
      
      (dolist (category categories)
        (let* ((stats (gethash category category-stats '(0 0)))
               (total (car stats))
               (completed (cadr stats))
               (progress-percent (if (> total 0)
                                   (/ (* completed 100.0) total)
                                 0))
               (category-color (cdr (assoc category hq-category-colors)))
               (base-rewards (cdr (assoc category hq-task-rewards))))
          
          (insert (format " %-10s %d/%d %s %.1f%%  +%dXP +%dü™ô\n"
                          (propertize category 'face `(:foreground ,category-color :weight bold))
                          completed total
                          (hq-progress-bar completed total 20)
                          progress-percent
                          (plist-get base-rewards :xp)
                          (plist-get base-rewards :gold)))))
      
      ;; –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      (insert (hq-make-divider) "\n")
      (insert (propertize " –û–ë–©–ò–ô –ü–†–û–ì–†–ï–°–° " 'face '(:foreground "#5C85D6" :weight bold)) "\n")
      
      (let* ((overall-progress (if (> total-tasks 0)
                                  (/ (* completed-tasks 100.0) total-tasks)
                                0)))
        
        (insert (format " –í—Å–µ–≥–æ: %d/%d –∑–∞–¥–∞—á  %s %.1f%%\n"
                        completed-tasks total-tasks
                        (hq-progress-bar completed-tasks total-tasks 25)
                        overall-progress)))
      
      ;; –ù–∏–∂–Ω–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
      (insert (hq-make-divider ?=) "\n"))))

(defun hq-add-quest-info-to-agenda (&optional arg)
  "–î–æ–±–∞–≤–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–∞—Ö –≤ –±—É—Ñ–µ—Ä agenda."
  (interactive)
  (let ((inhibit-read-only t))
    (let ((current-level (or hq-level 1))
          (current-xp (or hq-xp 0))
          (current-gold (or hq-gold 0)))
      
      ;; –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
      (goto-char (point-max))
      (insert "\n")
      (insert (hq-make-divider ?=) "\n")
      (insert (hq-make-header "üéÆ HABIT QUEST SYSTEM üéÆ") "\n")
      (insert (hq-make-divider ?=) "\n")
      
      ;; –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      (insert (propertize " –ü–ï–†–°–û–ù–ê–ñ " 'face '(:foreground "#5C85D6" :weight bold)) "\n")
      (insert (format " –£—Ä–æ–≤–µ–Ω—å: %d   XP: %d/100   %s   –ó–æ–ª–æ—Ç–æ: %d ü™ô\n" 
                      current-level (mod current-xp 100) 
                      (hq-progress-bar (mod current-xp 100) 100 20)
                      current-gold))
      
      ;; –†–∞–∑–¥–µ–ª –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
      (when hq-daily-bonus
        (insert (hq-make-divider) "\n")
        (insert (propertize " –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–û–ù–£–° " 'face '(:foreground "#5C85D6" :weight bold)) "\n")
        (insert (format " –í—ã–ø–æ–ª–Ω–∏—Ç–µ: %s\n" 
                        (propertize (plist-get hq-daily-bonus :habit)
                                   'face '(:foreground "#4ECDC4" :weight bold))))
        (insert (format " –ù–∞–≥—Ä–∞–¥–∞: %s\n"
                        (propertize (format "+%d XP, +%d –∑–æ–ª–æ—Ç–∞" 
                                           (or (plist-get hq-daily-bonus :xp) 0)
                                           (or (plist-get hq-daily-bonus :gold) 0))
                                   'face '(:foreground "#4CAF50" :weight bold)))))
      
      ;; –†–∞–∑–¥–µ–ª –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
      (insert (hq-make-divider) "\n")
      (insert (propertize " –ê–ö–¢–ò–í–ù–´–ï –ö–í–ï–°–¢–´ " 'face '(:foreground "#5C85D6" :weight bold)) "\n")
      
      (let ((active-quests 0))
        (dolist (quest hq-quests)
          (unless (plist-get quest :completed)
            (setq active-quests (1+ active-quests))
            (let* ((name (or (plist-get quest :name) "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–≤–µ—Å—Ç"))
                   (progress (or (plist-get quest :progress) 0))
                   (required (or (plist-get quest :required) 1))
                   (progress-percent (if (> required 0)
                                        (* (/ (float progress) required) 100)
                                      0.0))
                   (quest-icon (cond
                               ((>= progress required) "‚úÖ")
                               ((>= progress (/ required 2)) "üî∂")
                               (t "üî∑"))))
              
              (insert (format " %s %s\n" quest-icon
                              (propertize name 'face '(:foreground "#4A90E2" :weight bold))))
              (insert (format "   %d/%d –¥–Ω–µ–π %s %.1f%%\n"
                              progress required
                              (hq-progress-bar progress required 20)
                              progress-percent))
              (insert (format "   –ù–∞–≥—Ä–∞–¥–∞: %s\n\n"
                              (propertize (format "+%d XP, +%d –∑–æ–ª–æ—Ç–∞" 
                                                 (or (plist-get quest :reward-xp) 0)
                                                 (or (plist-get quest :reward-gold) 0))
                                         'face '(:foreground "#4CAF50")))))))
        
        (when (zerop active-quests)
          (insert (propertize " –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤\n" 
                             'face '(:foreground "#888888" :slant italic))))
        
        ;; –ö–Ω–æ–ø–∫–∞ Market
        (insert (hq-make-divider) "\n")
        (insert (propertize " –ú–ê–ì–ê–ó–ò–ù " 'face '(:foreground "#5C85D6" :weight bold)) "\n")
        
        (let ((market-button
               (propertize " üè™ –û–¢–ö–†–´–¢–¨ –ú–ê–ì–ê–ó–ò–ù "
                          'face '(:foreground "white"
                                            :background "#4CAF50"
                                            :weight bold
                                            :box (:line-width 2 :style released-button))
                          'mouse-face 'highlight
                          'keymap (let ((map (make-sparse-keymap)))
                                   (define-key map [mouse-1] 'hq-market)
                                   map))))
          (insert " " market-button "\n"))
        
        ;; –ù–∏–∂–Ω–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        (insert (hq-make-divider ?=) "\n")))))

(provide 'quest-ui)
