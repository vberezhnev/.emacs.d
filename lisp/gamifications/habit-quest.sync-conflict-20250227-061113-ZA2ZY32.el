;;; habit-quest.el --- Quest system for org-habit -*- lexical-binding: t; -*-

(require 'quest-system-core)
(require 'widget)
(require 'wid-edit)
(require 'market)
;; (require 'penalties)

;; –ë–∞–∑–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
(defvar hq-xp 0 "–û–ø—ã—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
(defvar hq-level 1 "–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
(defvar hq-gold 0 "–ó–æ–ª–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")

;; –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
(defvar hq-quests
  '((:id 1 :name "–ü—É—Ç—å –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏"
				 :description "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —Ç—Ä–∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"
				 :habits ("üéØ‚Äç - –£—Ç—Ä–µ–Ω–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è" "üåüÔ∏è - –î–Ω–µ–≤–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è" "üåø - –í–µ—á–µ—Ä–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è")
				 :required 5 :progress 0 :completed nil
				 :reward-xp 200 :reward-gold 100)

    (:id 2 :name "–ñ–µ–ª–µ–∑–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"
				 :description "–ü—Ä–æ—Å—ã–ø–∞–π—Ç–µ—Å—å –≤ 05:30 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"
				 :habits ("‚è∞ - –ü—Ä–æ—Å–Ω—É—Ç—å—Å—è –≤ 05;30")
				 :required 7 :progress 0 :completed nil
				 :reward-xp 300 :reward-gold 150)

    (:id 3 :name "–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å"
				 :description "–í—ã–ø–∏–≤–∞–π—Ç–µ 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –∏ –¥–µ–ª–∞–π—Ç–µ 10–∫ —à–∞–≥–æ–≤ 10 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"
				 :habits ("üíß - 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã" "üö∂ - 10–∫ —à–∞–≥–æ–≤")
				 :required 10 :progress 0 :completed nil
				 :reward-xp 400 :reward-gold 200)

    (:id 4 :name "–§–æ–∫—É—Å –Ω–∞ —É—á–µ–±–µ"
				 :description "–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ï–ì–≠ 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"
				 :habits ("üìù - –ï–ì–≠")
				 :required 5 :progress 0 :completed nil
				 :reward-xp 400 :reward-gold 400)

    (:id 5 :name "–†–µ–∂–∏–º –±–æ–¥—Ä–æ—Å—Ç–∏"
				 :description "–ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"
				 :habits ("üöø - –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à")
				 :required 7 :progress 0 :completed nil
				 :reward-xp 140 :reward-gold 70))
  "–°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤")

;; –°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
(defvar hq-daily-bonus nil
  "–¢–µ–∫—É—â–µ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.")

(defvar hq-last-bonus-date nil
  "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")

;; –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
(defun hq-save-data ()
  "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"
  (interactive)
  (message "üóÑÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
  (message "XP: %d, Level: %d, Gold: %d" hq-xp hq-level hq-gold)
  (with-temp-file "~/.emacs.d/habit-quest-data.el"
    (prin1 (list hq-xp
                 hq-level
                 hq-gold
                 hq-quests
                 hq-inventory
                 hq-daily-bonus
                 hq-last-bonus-date)
           (current-buffer)))
  (message "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"))

(defun hq-load-data ()
  "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"
  (interactive)
  (when (file-exists-p "~/.emacs.d/habit-quest-data.el")
    (with-temp-buffer
      (insert-file-contents "~/.emacs.d/habit-quest-data.el")
      (goto-char (point-min))
      (let ((data (read (current-buffer))))
        (setq hq-xp (nth 0 data))
        (setq hq-level (nth 1 data))
        (setq hq-gold (nth 2 data))
        (setq hq-quests (nth 3 data))
        (setq hq-inventory (nth 4 data))
        (setq hq-daily-bonus (nth 5 data))
        (setq hq-last-bonus-date (nth 6 data)))
      
      (message "üîç –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:")
      (message "XP: %d, Level: %d, Gold: %d" hq-xp hq-level hq-gold))))

(defun hq-calculate-combined-streak (habits habit-stats)
  "–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π, –∫–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.
HABITS - —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
HABIT-STATS - —Ö–µ—à-—Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö"
  (let ((streaks-data nil))
    ;; –°–æ–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    (dolist (habit habits)
      (when-let ((habit-data (gethash habit habit-stats)))
        (push (cdr habit-data) streaks-data)))
    
    ;; –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    (when (= (length streaks-data) (length habits))
      (let ((combined-streak 0)
            (day-index 0)
            (continue t))
        ;; –ò–¥–µ–º –ø–æ –¥–Ω—è–º, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        (while (and continue
                    (< day-index (length (car streaks-data))))
          (let ((all-done t))
            ;; –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
            (dolist (habit-state streaks-data)
              (when (and (< day-index (length habit-state))
                        (not (char-equal (aref habit-state day-index) ?‚óè)))
                (setq all-done nil)))
            
            ;; –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
            (if all-done
                (setq combined-streak (1+ combined-streak))
              ;; –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–¥—Å—á–µ—Ç
              (setq continue nil)))
          (setq day-index (1+ day-index)))
        combined-streak))))

;; –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫
(defvar habit-stats (make-hash-table :test 'equal)
  "–•–µ—à-—Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫.
–ö–ª—é—á–∏ - –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫, –∑–Ω–∞—á–µ–Ω–∏—è - –ø–∞—Ä—ã (—Å—Ç—Ä–∏–∫ . —Å—Ç—Ä–æ–∫–∞-—Å–æ—Å—Ç–æ—è–Ω–∏—è)")

;; –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–≤–µ—Å—Ç–æ–≤
(defun hq-update-quest-progress ()
  "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Å—Ç—Ä–∏–∫–æ–≤ –ø—Ä–∏–≤—ã—á–µ–∫."
  (interactive)
  (clrhash habit-stats)
  
  ;; –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö
  (with-current-buffer "*Org Agenda*"
    (save-excursion
      (goto-char (point-min))
      (while (not (eobp))
        (when (get-text-property (point) 'org-habit-p)
          (let* ((marker (get-text-property (point) 'org-hd-marker))
                 (habit-name nil)
                 (habit-streak 0)
                 (habits-state nil))
            
            ;; –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
            (when marker
              (with-current-buffer (marker-buffer marker)
                (save-excursion
                  (goto-char (marker-position marker))
                  (setq habit-name (org-get-heading t t t t)))))
            
            ;; –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∏–∫–∞—Ö
            (save-excursion
              (end-of-line)
              (when (re-search-backward "\\[üî• \\([0-9]+\\)\\]" (line-beginning-position) t)
                (setq habit-streak (string-to-number (match-string 1)))
                ;; –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
                (when (re-search-backward "\\([‚óã‚óè‚óé]+\\)" (line-beginning-position) t)
                  (setq habits-state (buffer-substring-no-properties
                                    (match-beginning 1)
                                    (match-end 1)))))
            
            ;; –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
            (when (and habit-name habit-streak)
              (puthash habit-name
                       (cons habit-streak (or habits-state ""))
                       habit-stats)))))
        (forward-line 1)))
    
    ;; –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–æ–≤
  (dolist (quest hq-quests)
    (unless (plist-get quest :completed)
      (let* ((habits (plist-get quest :habits))
             (required (plist-get quest :required))
             (current-progress 0))
        
        (if (= (length habits) 1)
            ;; –î–ª—è –∫–≤–µ—Å—Ç–æ–≤ —Å –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–æ–π
            (let ((habit-data (gethash (car habits) habit-stats)))
              (when habit-data
                (setq current-progress (car habit-data))))
          
          ;; –î–ª—è –∫–≤–µ—Å—Ç–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
          ;; –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ —Å—Ç—Ä–∏–∫–∞
          (setq current-progress 
                (hq-calculate-combined-streak habits habit-stats)))
        
        ;; –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–≤–µ—Å—Ç–∞
        (setf (plist-get quest :progress) current-progress))))
  
    
    ;; –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    (hq-save-data)))

;; –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
(defun hq-generate-daily-bonus ()
  "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ."
  (interactive)
  (let* ((current-date (format-time-string "%Y-%m-%d"))
         (all-habits '()))

    ;; –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏
    (dolist (quest hq-quests)
      (unless (plist-get quest :completed)
        (dolist (habit (plist-get quest :habits))
          (push habit all-habits))))

    ;; –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    (setq all-habits (delete-dups all-habits))

    ;; –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    (when (or (not hq-last-bonus-date)
              (not (string= current-date hq-last-bonus-date)))
      (if all-habits
          (let* ((selected-habit (nth (random (length all-habits)) all-habits))
                 (bonus-xp 25)
                 (bonus-gold 15))
            (setq hq-daily-bonus (list :habit selected-habit
                                       :xp bonus-xp
                                       :gold bonus-gold)))
        (setq hq-daily-bonus nil))

      (setq hq-last-bonus-date current-date)
      (hq-save-data))))

;; –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
;; (defun hq-check-daily-bonus (habit-name)
;;   (when (and hq-daily-bonus
;;              (string= habit-name (plist-get hq-daily-bonus :habit)))
;;     (let ((bonus-xp (plist-get hq-daily-bonus :xp))
;;           (bonus-gold (plist-get hq-daily-bonus :gold)))
;;       (hq-add-xp-and-gold bonus-xp bonus-gold)
;;       (setq hq-daily-bonus nil)
;;       (hq-save-data))))

(defun hq-add-quest-info-to-agenda (&optional arg)
  "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–∞—Ö –≤ –∫–æ–Ω–µ—Ü agenda —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫."
  (interactive)
  (let ((inhibit-read-only t))
    ;; –ó–∞—â–∏—Ç–∞ –æ—Ç nil –∑–Ω–∞—á–µ–Ω–∏–π
    (let ((current-level (or hq-level 1))
          (current-xp (or hq-xp 0))
          (current-gold (or hq-gold 0)))
      
      ;; –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
      (goto-char (point-max))
      (insert "\n"
              (propertize "============================\n"
                          'face '(:foreground "#4A90E2")))
      
      ;; –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      (insert
       (propertize "üéÆ HABIT QUEST SYSTEM üéÆ\n"
                   'face '(:foreground "#4A90E2" :weight bold :height 1.2))
       (propertize (format "üë§ Level %d " current-level)
                   'face '(:foreground "#FFD700" :weight bold))
       "| "
       (propertize (format "XP: %d/%d "
                           (mod current-xp 100)
                           100)
                   'face '(:foreground "#4CAF50" :weight bold))
       "| "
       (propertize (format "Gold: %d ü™ô\n" current-gold)
                   'face '(:foreground "#FFD700" :weight bold)))
      
      ;; –ë–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
      (when hq-daily-bonus
        (insert
         (propertize "üéØ –ë–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
                     'face '(:foreground "#2196F3" :weight bold))
         (format "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É '%s' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞: "
                 (plist-get hq-daily-bonus :habit))
         (propertize (format "%d XP, %d –∑–æ–ª–æ—Ç–∞\n"
                            (or (plist-get hq-daily-bonus :xp) 0)
                            (or (plist-get hq-daily-bonus :gold) 0))
                     'face '(:foreground "#4CAF50"))))
      
      ;; –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
      (insert
       (propertize "\nüìú –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã\n"
                   'face '(:foreground "#2196F3" :weight bold)))
      
      (let ((active-quests 0)
            (quest-bar-width 20))
        (dolist (quest hq-quests)
          (unless (plist-get quest :completed)
            (setq active-quests (1+ active-quests))
            (let* ((name (or (plist-get quest :name) "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–≤–µ—Å—Ç"))
                   (progress (or (plist-get quest :progress) 0))
                   (required (or (plist-get quest :required) 1))
                   (progress-percent (if (> required 0)
                                        (* (/ (float progress) required) 100)
                                      0.0))
                   (filled-length (round (* quest-bar-width (/ progress-percent 100.0))))
                   (empty-length (- quest-bar-width filled-length)))
              
              (insert
               (propertize (format "‚àò %s\n" name)
                           'face '(:foreground "#4A90E2")))
              
              (insert
               (propertize (format "  %d/%d –¥–Ω–µ–π " progress required)
                           'face '(:foreground "#333333")))
              
              (insert
               (propertize (concat
                           (make-string filled-length ?#)
                           (make-string empty-length ?¬∑))
                          'face '(:foreground "#4CAF50")))
              
              (insert (format " %.1f%%\n\n" progress-percent)))))
        
        (when (zerop active-quests)
          (insert
           (propertize "  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤\n"
                       'face '(:foreground "#888888" :slant italic)))))
      
      ;; –ö–Ω–æ–ø–∫–∞ Market
      (insert "\n")
      (let ((market-button
             (propertize "[üè™ –û—Ç–∫—Ä—ã—Ç—å Market]"
                        'face '(:foreground "white"
                                          :background "#4CAF50"
                                          :weight bold
                                          :box (:line-width 2 :style released-button))
                        'mouse-face 'highlight
                        'keymap (let ((map (make-sparse-keymap)))
                                 (define-key map [mouse-1] 'hq-market)
                                 map))))
        (insert market-button "\n")))))

;; –•—É–∫ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
(defun hq-org-habit-streak-hook ()
  "–•—É–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ org-habit-streak-count –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–≤–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π."
  (with-current-buffer "*Org Agenda*"
    (save-excursion
      (goto-char (point-min))
      (while (not (eobp))
        (when (get-text-property (point) 'org-habit-p)
          (let* ((marker (get-text-property (point) 'org-hd-marker))
                 (habit-name nil))
            (when marker
              (with-current-buffer (marker-buffer marker)
                (save-excursion
                  (goto-char (marker-position marker))
                  (setq habit-name (org-get-heading t t t t)))))

            ;; –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –±–æ–Ω—É—Å–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º
            (when (and hq-daily-bonus habit-name
                       (string= habit-name (plist-get hq-daily-bonus :habit)))
              (save-excursion
                (end-of-line)
                (let ((inhibit-read-only t))
                  (insert " üåü"))))))
        (forward-line 1)))))

;; –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
(defun hq-complete-quest (quest-name)
  "–í—Ä—É—á–Ω—É—é –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"
  (interactive
   (list (completing-read "–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–µ—Å—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: "
													(mapcar (lambda (quest)
																		(unless (plist-get quest :completed)
																			(plist-get quest :name)))
																	hq-quests)
													nil t)))

  ;; –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–≤–µ—Å—Ç
  (let ((quest nil))
    (dolist (q hq-quests)
      (when (and (not (plist-get q :completed))
                 (string= (plist-get q :name) quest-name))
        (setq quest q)))

    ;; –ï—Å–ª–∏ –∫–≤–µ—Å—Ç –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ
    (if quest
        (progn
          ;; –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
          (setf (plist-get quest :completed) t)

          ;; –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
          (let ((reward-xp (plist-get quest :reward-xp))
                (reward-gold (plist-get quest :reward-gold)))
            (setq hq-xp (+ hq-xp reward-xp))
            (setq hq-gold (+ hq-gold reward-gold))

            ;; –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            (let ((new-level (1+ (/ hq-xp 100))))
              (when (> new-level hq-level)
                (setq hq-level new-level)
                (message "–£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã —É—Ä–æ–≤–Ω—è %d!" hq-level)))

            (message "–ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: %s! +%d XP, +%d –∑–æ–ª–æ—Ç–∞!"
                     quest-name reward-xp reward-gold)))

      (message "–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")))

  ;; –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
  (hq-save-data))

;; –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è quest view (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
(defun hq-habits-quest-view ()
  "–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å agenda —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–≤–µ—Å—Ç–∞—Ö."
  (interactive)
  
  ;; –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
  (unless hq-quests
    (setq hq-quests '()))  ; –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –µ—Å–ª–∏ nil
  
  ;; –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º view
  (hq-generate-daily-bonus)
  
  ;; –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ org-agenda
  (condition-case err
      (org-agenda nil "x")
    (error
     (message "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ agenda: %s" err)))
  
  ;; –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  (run-with-timer 0.5 nil
                  (lambda ()
                    (when (get-buffer "*Org Agenda*")
                      (with-current-buffer "*Org Agenda*"
                        (save-excursion
                          ;; –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
                          (condition-case nil
                              (progn
                                (hq-update-quest-progress)
                                (let ((inhibit-read-only t))
                                  (hq-add-quest-info-to-agenda)))
                            (error
                             (message "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–µ—Å—Ç–∞—Ö")))))))))

(defvar hq-daily-bonus nil
  "–¢–µ–∫—É—â–µ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.")

(defvar hq-last-bonus-date nil
  "–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")

(defun hq-generate-daily-bonus ()
  "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ."
  (interactive)
  (let* ((current-date (format-time-string "%Y-%m-%d"))
         (all-habits '()))

    ;; –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏
    (dolist (quest hq-quests)
      (unless (plist-get quest :completed)
        (dolist (habit (plist-get quest :habits))
          (push habit all-habits))))

    ;; –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    (setq all-habits (delete-dups all-habits))

    ;; –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    (when (or (not hq-last-bonus-date)
              (not (string= current-date hq-last-bonus-date)))
      (if all-habits
          (let* ((selected-habit (nth (random (length all-habits)) all-habits))
                 (bonus-xp 40)   ;; –£–≤–µ–ª–∏—á–∏–ª –±–∞–∑–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É
                 (bonus-gold 30))
            (setq hq-daily-bonus (list :habit selected-habit
                                       :xp bonus-xp
                                       :gold bonus-gold))
            ;; –Ø–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–Ω—É—Å–∞
            (message "üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: %s" selected-habit))
        (setq hq-daily-bonus nil))

      (setq hq-last-bonus-date current-date)
      (hq-save-data))))

(defun hq-check-daily-bonus (habit-name)
  "–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π."
  (interactive)
  
  ;; –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  (message "üîç –û—Ç–ª–∞–¥–∫–∞ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
  (message "–¢–µ–∫—É—â–µ–µ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: %s" 
           (if hq-daily-bonus 
               (plist-get hq-daily-bonus :habit) 
             "–ù–µ—Ç –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"))
  (message "–ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –ø—Ä–∏–≤—ã—á–∫–∞: %s" habit-name)
  
  (when (and hq-daily-bonus
             (string= habit-name (plist-get hq-daily-bonus :habit)))
    (let ((bonus-xp (plist-get hq-daily-bonus :xp))
          (bonus-gold (plist-get hq-daily-bonus :gold)))
      
      (message "‚úÖ –ë–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–≤–ø–∞–ª–æ!")
      (message "–ù–∞–≥—Ä–∞–¥–∞: %d XP, %d –∑–æ–ª–æ—Ç–∞" bonus-xp bonus-gold)
      
      ;; –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º
      (message "–¢–µ–∫—É—â–µ–µ –∑–æ–ª–æ—Ç–æ –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: %d" hq-gold)
      
      ;; –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–Ω–∞—á–µ–Ω–∏–π
      (condition-case err
          (progn
            (setq hq-xp (+ hq-xp bonus-xp))
            (setq hq-gold (+ hq-gold bonus-gold))
            
            (message "üåü –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω!")
            (message "–ó–æ–ª–æ—Ç–æ –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: %d" hq-gold))
        (error 
         (message "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞: %s" err)))
      
      ;; –°–±—Ä–æ—Å –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
      (setq hq-daily-bonus nil)
      (hq-save-data)
      
      ;; –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      (message "–ë–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ %s –∑–∞–≤–µ—Ä—à–µ–Ω–æ" habit-name))))

;; –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ–Ω—É—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—ã—á–∫–∏
(add-hook 'org-habit-after-done-hook 
          (lambda (habit-name)
            (hq-check-daily-bonus habit-name)))

;; –ù–∞—Å—Ç—Ä–æ–π–∫–∞
(defun hq-setup ()
  "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–≤–µ—Å—Ç–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏–≤—ã—á–µ–∫"
  (interactive)

  ;; –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  (hq-load-data)


  (message "–ö–≤–µ—Å—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è org-habit –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!"))

(defun hq-update-quest-info ()
  "–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–µ—Å—Ç–∞—Ö –≤ agenda."
  (when (string= (buffer-name) "*Org Agenda*")
    (message "Updating quest progress...")  ; –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    (hq-update-quest-progress)
    (let ((inhibit-read-only t))
      (save-excursion
        (goto-char (point-max))
        (hq-add-quest-info-to-agenda)))))

  ;; –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∞–≤–∏—à
  (global-set-key (kbd "C-c q") 'hq-habits-quest-view)
  ;; (global-set-key (kbd "C-c q") ' hq-update-quest-info)

;; –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
(hq-setup)

;;; habit-quest.el ends here
