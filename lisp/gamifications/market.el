;; market.el --- Enhanced market system for habit quest -*- lexical-binding: t; -*-

(require 'quest-system-core)

;; –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
(defvar hq-market-categories
  '((:id "rest" :name "–û—Ç–¥—ã—Ö" :icon "üåü" :description "–°–ø–æ—Å–æ–±—ã –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è")
    (:id "entertainment" :name "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" :icon "üéÆ" :description "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    (:id "bonus" :name "–ë–æ–Ω—É—Å—ã" :icon "‚ú®" :description "–û—Å–æ–±—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏")
    (:id "rare" :name "–†–µ–¥–∫–∏–µ —Ç–æ–≤–∞—Ä—ã" :icon "üíé" :description "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"))
  "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")

;; –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
(defvar hq-market-items
  '(;; –û—Ç–¥—ã—Ö
    (:id "break-30" :name "–ü–µ—Ä–µ—Ä—ã–≤ 30 –º–∏–Ω—É—Ç" :cost 30 :category "rest" 
     :description "–ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –¥–ª—è –æ—Ç–¥—ã—Ö–∞"
     :use-message "–û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏–ª—ã!")
    (:id "break-60" :name "–ß–∞—Å –æ—Ç–¥—ã—Ö–∞" :cost 50 :category "rest"
     :description "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —á–∞—Å –æ—Ç–¥—ã—Ö–∞"
     :use-message "–¶–µ–ª—ã–π —á–∞—Å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–ª!")
    (:id "nap" :name "–î–Ω–µ–≤–Ω–æ–π —Å–æ–Ω" :cost 80 :category "rest"
     :description "15-20 –º–∏–Ω—É—Ç —Å–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏"
     :use-message "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–µ–≥–æ —Å–Ω–∞!")
    
    ;; –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
    (:id "episode" :name "–°–µ—Ä–∏—è —Å–µ—Ä–∏–∞–ª–∞" :cost 60 :category "entertainment"
     :description "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–¥–Ω–æ–π —Å–µ—Ä–∏–∏ –ª—é–±–∏–º–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞"
     :use-message "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")
    (:id "movie" :name "–§–∏–ª—å–º" :cost 100 :category "entertainment"
     :description "–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞"
     :use-message "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ñ–∏–ª—å–º–æ–º!")
    (:id "gaming" :name "–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è" :cost 120 :category "entertainment"
     :description "1 —á–∞—Å –ª—é–±–∏–º—ã—Ö –∏–≥—Ä"
     :use-message "–í–µ—Å–µ–ª–æ–π –∏–≥—Ä—ã!")
    (:id "youtube" :name "YouTube Time" :cost 40 :category "entertainment"
     :description "30 –º–∏–Ω—É—Ç –Ω–∞ YouTube"
     :use-message "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")
    
    ;; –ë–æ–Ω—É—Å—ã
    (:id "delay-1h" :name "–û—Ç—Å—Ä–æ—á–∫–∞ –Ω–∞ —á–∞—Å" :cost 70 :category "bonus"
     :description "–û—Ç–ª–æ–∂–∏—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –Ω–∞ 1 —á–∞—Å"
     :use-message "–ó–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞ –Ω–∞ —á–∞—Å.")
    (:id "music" :name "–ú—É–∑—ã–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã" :cost 30 :category "bonus"
     :description "1 —á–∞—Å –º—É–∑—ã–∫–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"
     :use-message "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º—É–∑—ã–∫–æ–π!")
    (:id "late-wake" :name "–ü–æ–∑–¥–Ω–∏–π –ø–æ–¥—ä—ë–º" :cost 150 :category "bonus"
     :description "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—Å—Ç–∞—Ç—å –Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ"
     :use-message "–ú–æ–∂–µ—Ç–µ –ø–æ—Å–ø–∞—Ç—å –ø–æ–¥–æ–ª—å—à–µ!")
    
    ;; –†–µ–¥–∫–∏–µ —Ç–æ–≤–∞—Ä—ã
    (:id "day-off" :name "–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å" :cost 500 :category "rare"
     :description "–ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π –æ—Ç –≤—Å–µ—Ö –∑–∞–¥–∞—á"
     :discountable nil ; –ù–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É
     :use-message "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–º –≤—ã—Ö–æ–¥–Ω—ã–º!")
    (:id "weekend" :name "–ò–≥—Ä–æ–≤—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ" :cost 1000 :category "rare"
     :description "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–ª—è –∏–≥—Ä"
     :discountable nil
     :use-message "–í–µ—Å–µ–ª—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö!"))
  "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")

;; –°–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫
(defvar hq-market-discount nil
  "–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ (–ø—Ä–æ—Ü–µ–Ω—Ç).")

(defvar hq-market-discount-duration nil
  "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ–∫—É—â–µ–π —Å–∫–∏–¥–∫–∏.")

(defvar hq-market-last-refresh nil
  "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞.")

(defun hq-market-apply-random-discount ()
  "–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Å–∫–∏–¥–∫—É –∫ —Ç–æ–≤–∞—Ä–∞–º."
  (let ((discount (nth (random 3) '(10 20 30))))
    (setq hq-market-discount discount)
    (setq hq-market-discount-duration (time-add (current-time) (days-to-time 1)))
    (setq hq-market-last-refresh (current-time))))

(defun hq-market-check-discount ()
  "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∫–∏–¥–∫–∏."
  (when (and hq-market-discount-duration
             (time-less-p hq-market-discount-duration (current-time)))
    (setq hq-market-discount nil)
    (setq hq-market-discount-duration nil)))

;; –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
(defun hq-market-add-to-inventory (item-id)
  "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å."
  (push item-id hq-inventory)
  (hq-save-data))

(defun hq-market-remove-from-inventory (item-id)
  "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."
  (setq hq-inventory (delete item-id hq-inventory))
  (hq-save-data))

;; –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–∞–≥–∞–∑–∏–Ω–∞
(defun hq-market ()
  "–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∫—É–ø–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
  (interactive)
  (hq-market-check-discount)
  (let ((buffer (get-buffer-create "*Habit Market*")))
    (with-current-buffer buffer
      (let ((inhibit-read-only t))
        (erase-buffer)
        
        ;; –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –±–∞–ª–∞–Ω—Å
        (insert 
         (propertize "üè™ HABIT MARKET\n" 
                     'face '(:height 1.5 :weight bold :foreground "#4A90E2"))
         (propertize "============================\n"
                     'face '(:foreground "#4A90E2"))
         (propertize (format "üí∞ –ë–∞–ª–∞–Ω—Å: %d –∑–æ–ª–æ—Ç–∞\n" hq-gold)
                     'face '(:weight bold)))
        
        ;; –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–∏–¥–∫–µ
        (when hq-market-discount
          (insert 
           (propertize (format "üî• –°–ö–ò–î–ö–ê %d%%! üî•\n" hq-market-discount)
                       'face '(:foreground "#FF5722" :weight bold))))
        
        (insert "\n")
        
        ;; –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        (dolist (category hq-market-categories)
          (let ((category-id (plist-get category :id))
                (category-name (plist-get category :name))
                (category-icon (plist-get category :icon)))
            
            ;; –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            (insert 
             (propertize (format "%s %s\n" category-icon category-name)
                         'face '(:weight bold :height 1.2 :foreground "#2196F3")))
            
            ;; –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            (dolist (item hq-market-items)
              (when (string= (plist-get item :category) category-id)
                (let* ((item-id (plist-get item :id))
                       (item-name (plist-get item :name))
                       (item-desc (plist-get item :description))
                       (item-cost (plist-get item :cost))
                       (discountable (not (eq (plist-get item :discountable) nil)))
                       (final-cost (if (and hq-market-discount discountable)
                                     (round (* item-cost (- 1 (/ hq-market-discount 100.0))))
                                   item-cost))
                       (in-inventory (member item-id hq-inventory)))
                  
                  ;; –ù–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞ –∏ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                  (insert "  ")
                  (insert (propertize item-name 'face '(:weight bold)))
                  (insert " - ")
                  
                  ;; –¶–µ–Ω–∞
                  (if (and hq-market-discount discountable)
                      (insert (propertize (format "ü™ô%d‚Üí%d" item-cost final-cost)
                                        'face '(:foreground "#FFD700" :weight bold)))
                    (insert (propertize (format "ü™ô%d" final-cost)
                                      'face '(:foreground "#FFD700" :weight bold))))
                  
                  ;; –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
                  (insert " ")
                  (if in-inventory
                      (insert-text-button "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"
                                        'action (lambda (_) (hq-market-use-item item-id))
                                        'follow-link t
                                        'face '(:foreground "white" :background "#4CAF50" :weight bold))
                    (if (>= hq-gold final-cost)
                        (insert-text-button "–ö—É–ø–∏—Ç—å"
                                          'action (lambda (_) (hq-market-buy-item item-id))
                                          'follow-link t
                                          'face '(:foreground "white" :background "#2196F3" :weight bold))
                      (insert (propertize " ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞"
                                        'face '(:foreground "#FF5722")))))
                  
                  ;; –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –º–µ–ª–∫–∏–º —à—Ä–∏—Ñ—Ç–æ–º
                  (insert "\n    ")
                  (insert (propertize item-desc
                                    'face '(:slant italic :height 0.9 :foreground "#666666")))
                  (insert "\n"))))
            (insert "\n")))
        
        ;; –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
        (insert 
         (propertize "üì¶ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
                     'face '(:weight bold :height 1.1)))
        (if hq-inventory
            (dolist (item-id hq-inventory)
              (let* ((item (seq-find (lambda (i) 
                                      (string= (plist-get i :id) item-id))
                                    hq-market-items))
                     (item-name (plist-get item :name)))
                (insert "  ‚Ä¢ " item-name "\n")))
          (insert (propertize "  –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç\n" 
                             'face '(:foreground "#888888" :slant italic)))))
      
      (special-mode)
      (local-set-key "q" 'quit-window)
      (local-set-key "r" 'hq-market))
    
    (switch-to-buffer buffer)))

(defun hq-market-buy-item (item-id)
  "–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞."
  (let* ((item (seq-find (lambda (i) 
                          (string= (plist-get i :id) item-id))
                        hq-market-items))
         (cost (plist-get item :cost))
         (discountable (not (eq (plist-get item :discountable) nil)))
         (final-cost (if (and hq-market-discount discountable)
                        (round (* cost (- 1 (/ hq-market-discount 100.0))))
                      cost)))
    (if (>= hq-gold final-cost)
        (progn
          (setq hq-gold (- hq-gold final-cost))
          (hq-market-add-to-inventory item-id)
          (message "‚ú® –í—ã –∫—É–ø–∏–ª–∏ %s –∑–∞ %d –∑–æ–ª–æ—Ç–∞!" 
                   (plist-get item :name) final-cost))
      (message "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ %s!" 
               (plist-get item :name)))
    (hq-market)))

(defun hq-market-use-item (item-id)
  "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."
  (let* ((item (seq-find (lambda (i) 
                          (string= (plist-get i :id) item-id))
                        hq-market-items))
         (use-message (plist-get item :use-message)))
    (hq-market-remove-from-inventory item-id)
    (message "üéâ %s" use-message)
    (hq-market)))

;; –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∞–≤–∏—à –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
(global-set-key (kbd "C-c m") 'hq-market)

(provide 'market)
