(require 'quest-system-core)

(defvar hq-task-rewards
  '(("EGE" . (:xp 50 :gold 40))
    ("MERITRANK" . (:xp 40 :gold 30))
    ("CODING" . (:xp 30 :gold 20))
    ("PERSONAL" . (:xp 20 :gold 10)))
  "–ë–∞–∑–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

(defvar hq-priority-multipliers
  '((?A . 2.0)    ; –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç A —É–¥–≤–∞–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É
    (?B . 1.5)    ; –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç B —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –≤ 1.5 —Ä–∞–∑–∞
    (?C . 1.0))   ; –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç C –æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É
  "–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –Ω–∞–≥—Ä–∞–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∑–∞–¥–∞—á–∏.")

(defun hq-calculate-time-bonus (clock-minutes)
  "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–Ω—É—Å –∑–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
–ö–∞–∂–¥—ã–π –ø–æ–ª–Ω—ã–π —á–∞—Å —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤–ª—è–µ—Ç 10% –∫ –Ω–∞–≥—Ä–∞–¥–µ."
  (let ((hours (/ clock-minutes 60.0)))
    (+ 1.0 (* 0.1 (floor hours)))))

(defun hq-calculate-deadline-bonus ()
  "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–æ–Ω—É—Å –∑–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞.
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1.5 –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ —Å—Ä–æ–∫, 1.0 –µ—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∏–ª–∏ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞."
  (let ((deadline (org-entry-get nil "DEADLINE")))
    (if (and deadline 
             (time-less-p (current-time)
                         (org-time-string-to-time deadline)))
        1.5  ; –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
      1.0))) ; –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∏–ª–∏ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞

(defun hq-reward-for-task-completion ()
  "–ù–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."
  (when (and (member org-state '("DONE" "done"))  ; –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
             (not (member "habit" (org-get-tags)))) ; –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏
    (let* ((category (or (org-entry-get nil "CATEGORY") "PERSONAL"))
           (base-rewards (cdr (assoc category hq-task-rewards)))
           (priority (org-entry-get nil "PRIORITY"))
           (priority-mult (or (cdr (assoc (and priority (aref priority 0)) 
                                        hq-priority-multipliers))
                            1.0))
           ;; –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π
           (clock-minutes (org-clock-sum-current-item))
           (time-bonus (hq-calculate-time-bonus clock-minutes))
           (deadline-bonus (hq-calculate-deadline-bonus))
           
           ;; –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –±–æ–Ω—É—Å–æ–≤
           (final-xp (round (* (plist-get base-rewards :xp)
                              priority-mult
                              time-bonus
                              deadline-bonus)))
           (final-gold (round (* (plist-get base-rewards :gold)
                                priority-mult
                                time-bonus
                                deadline-bonus))))

      ;; –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
      (setq hq-xp (+ hq-xp final-xp))
      (setq hq-gold (+ hq-gold final-gold))
      
      ;; –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      (let ((new-level (1+ (/ hq-xp 100))))
        (when (> new-level hq-level)
          (setq hq-level new-level)
          (message "üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã %d —É—Ä–æ–≤–Ω—è!" hq-level)))
      
      ;; –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
      (hq-save-data)
      
      ;; –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
      (message "‚ú® –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ: +%d XP, +%d –∑–æ–ª–æ—Ç–∞ [%s]"
               final-xp final-gold category))))

;; –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
(add-hook 'org-after-todo-state-change-hook 'hq-reward-for-task-completion)

;; –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
(defun hq-show-potential-reward ()
  "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏."
  (interactive)
  (let* ((category (or (org-entry-get nil "CATEGORY") "PERSONAL"))
         (base-rewards (cdr (assoc category hq-task-rewards)))
         (priority (org-entry-get nil "PRIORITY"))
         (priority-mult (or (cdr (assoc (and priority (aref priority 0)) 
                                      hq-priority-multipliers))
                          1.0))
         (clock-minutes (org-clock-sum-current-item))
         (time-bonus (hq-calculate-time-bonus clock-minutes))
         (deadline-bonus (hq-calculate-deadline-bonus))
         
         (potential-xp (round (* (plist-get base-rewards :xp)
                                priority-mult
                                time-bonus
                                deadline-bonus)))
         (potential-gold (round (* (plist-get base-rewards :gold)
                                  priority-mult
                                  time-bonus
                                  deadline-bonus))))
    
    (message "üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: %d XP, %d –∑–æ–ª–æ—Ç–∞ [%s]
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: x%.1f
‚Ä¢ –ë–æ–Ω—É—Å –∑–∞ –≤—Ä–µ–º—è: x%.1f
‚Ä¢ –ë–æ–Ω—É—Å –∑–∞ –¥–µ–¥–ª–∞–π–Ω: x%.1f"
             potential-xp potential-gold category
             priority-mult time-bonus deadline-bonus)))

;; –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã –∫ —É–¥–æ–±–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à
(define-key org-mode-map (kbd "C-c r") 'hq-show-potential-reward)

(defun gtd-add-progress-info-to-agenda (&optional arg)
  "–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤ GTD view"
  (interactive)
  (let ((inhibit-read-only t))
    ;; –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    (goto-char (point-max))
    (insert "\n" 
            (propertize "============================\n" 
                        'face '(:foreground "#4A90E2")))
    (insert (propertize "üöÄ GTD PROGRESS SYSTEM üöÄ\n" 
                        'face '(:foreground "#4A90E2" :weight bold :height 1.2)))

    ;; –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
    (insert 
     (propertize (format "üë§ Level %d " hq-level)
                 'face '(:foreground "#FFD700" :weight bold))
     "| "
     (propertize (format "XP: %d/%d " 
                         (mod hq-xp 100) 
                         100)
                 'face '(:foreground "#4CAF50" :weight bold))
     "| "
     (propertize (format "Gold: %d ü™ô\n" hq-gold)
                 'face '(:foreground "#FFD700" :weight bold))
     "\n")
    
    ;; –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    (let* ((categories '("EGE" "MERITRANK" "CODING" "PERSONAL")) ; –ò–∑–º–µ–Ω–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
           (total-tasks 0)
           (completed-tasks 0)
           (category-stats (make-hash-table :test 'equal))
           (category-colors ; –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            '(("EGE" . "#FF6B6B")      ; –ö—Ä–∞—Å–Ω—ã–π
              ("MERITRANK" . "#4ECDC4") ; –ë–∏—Ä—é–∑–æ–≤—ã–π
              ("CODING" . "#45B7D1")    ; –ì–æ–ª—É–±–æ–π
              ("PERSONAL" . "#96CEB4"))) ; –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
           (category-emoji ; –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            '(("EGE" . "üìö")
              ("MERITRANK" . "üåü")
              ("CODING" . "üíª")
              ("PERSONAL" . "üéØ"))))
      
      ;; –ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "^\\([A-Z]+\\)\\s-+|" nil t)
          (let* ((category (match-string 1))
                 (is-completed (save-match-data 
                                (or (looking-at ".*x [0-9]+d\.: ")
                                    (looking-at ".*DONE"))))
                 (current-count (gethash category category-stats 0)))
            (when (member category categories)
              (puthash category 
                       (list 
                        (1+ (car (gethash category category-stats '(0 0))))
                        (+ (cadr (gethash category category-stats '(0 0)))
                           (if is-completed 1 0)))
                       category-stats)
              (setq total-tasks (1+ total-tasks))
              (when is-completed 
                (setq completed-tasks (1+ completed-tasks)))))))
      
      ;; –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      (insert 
       (propertize "## –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n" 
                   'face '(:foreground "#2196F3" :weight bold)))
      
      (dolist (category categories)
        (let* ((stats (gethash category category-stats '(0 0)))
               (total (car stats))
               (completed (cadr stats))
               (progress-percent (if (> total 0) 
                                   (/ (* completed 100.0) total)
                                 0))
               (quest-bar-width 20)
               (filled-length (round (* quest-bar-width (/ progress-percent 100.0))))
               (empty-length (- quest-bar-width filled-length))
               (category-color (cdr (assoc category category-colors)))
               (category-icon (cdr (assoc category category-emoji)))
               (base-rewards (cdr (assoc category hq-task-rewards))))
          
          ;; –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —ç–º–æ–¥–∑–∏
          (insert 
           (propertize (format "%s %s\n" category-icon category)
                       'face `(:foreground ,category-color :weight bold)))
          
          ;; –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          (insert "  ")
          (insert 
           (propertize (format "%d/%d –∑–∞–¥–∞—á " completed total)
                       'face '(:foreground "#333333")))
          
          (insert 
           (propertize 
            (concat 
             (make-string filled-length ?‚ñ∞)    ; –ñ–∏—Ä–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏
             (make-string empty-length ?‚ñ±))    ; –¢–æ–Ω–∫–∞—è –ø–æ–ª–æ—Å–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–π —á–∞—Å—Ç–∏
            'face `(:foreground ,category-color)))
          
          (insert 
           (propertize (format " %.1f%%" progress-percent)
                       'face `(:foreground ,category-color :weight bold)))
          
          ;; –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö
          (insert 
           (format "\n    –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞—á—É: +%d XP, +%d ü™ô\n\n"
                   (plist-get base-rewards :xp)
                   (plist-get base-rewards :gold)))))
      
      ;; –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      (let* ((overall-progress (if (> total-tasks 0) 
                                 (/ (* completed-tasks 100.0) total-tasks)
                               0))
             (quest-bar-width 30)
             (filled-length (round (* quest-bar-width (/ overall-progress 100.0))))
             (empty-length (- quest-bar-width filled-length)))
        
        (insert 
         (propertize "\n## –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n" 
                     'face '(:foreground "#2196F3" :weight bold)))
        
        (insert "  ")
        (insert 
         (propertize (format "%d/%d –∑–∞–¥–∞—á " completed-tasks total-tasks)
                     'face '(:foreground "#333333")))
        
        ;; –¶–≤–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        (let ((progress-color
               (cond
                ((>= overall-progress 80) "#4CAF50") ; –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                ((>= overall-progress 50) "#FFA726") ; –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ
                (t "#FF7043"))))                     ; –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ
          
          (insert 
           (propertize 
            (concat 
             (make-string filled-length ?‚ñ∞)
             (make-string empty-length ?‚ñ±))
            'face `(:foreground ,progress-color)))
          
          (insert 
           (propertize (format " %.1f%%\n" overall-progress)
                       'face `(:foreground ,progress-color :weight bold))))))))
